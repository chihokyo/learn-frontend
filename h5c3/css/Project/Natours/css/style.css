/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* 基本会把充值放在*，其实有些老师不建议。说放在html或者:root这样 */
* *::after *::before {
  margin: 0;
  padding: 0;
  /* 这里从为什么 border-box 变成了强制继承inherit
   因为首先box-sizing这个属性无法继承
   所以全局设置成了 可以继承 然后在body里设置 border-box 就达到了全局效果
   */
  box-sizing: inherit;
}

html {
  /* ❓这里的百分比怎么算的呢？ */
  /* 其实这里打算所有的都统一成rem，为了让所有的子元素都便于计算
  所以打算给根元素font-size来一个10px 
  但是这样写死了之后，就无法随着浏览器的大小改变了。浏览器默认的是16px
  所以这里使用的是 【10px / 浏览器默认大小(16px) = 62.5%】  */
  /* 这样就可以随着浏览器默认值的大小 随意改变网页大小了 */
  font-size: 62.5%;
}
/* 这里经常放一些字体 因为字体基本上都有继承性。为什么不放在html？
因为你会发现body下面才是内容 这样继承下来才更有意义。 */
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* 相当于是16px*1.7 */
  line-height: 1.7;
  /* 三个数字越大 越浅 */
  color: #777;
  /* padding不会被继承 */
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  /* 平铺并保持底部不变 */
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.header .header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header .header__logo-box .header__logo {
  height: 3.5rem;
  /* 不设置width 就是默认的auto */
}

.header .header__text-box {
  /* 一个居中方案 */
  position: absolute;
  top: 40%;
  left: 50%;
  /* 截止到这里会发现有偏移，下面的变形可以相对于自身进行偏移 */
  transform: translate(-50%, -50%);
  /* 这里为了下面的按钮写的 */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* 抗震动 主要是动画的 这个很少见 */
  backface-visibility: hidden;
  /* 为了跟按钮保持距离 */
  margin-bottom: 6rem;
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* transform: translate(0); */
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-in;
  /* animation-iteration-count: 3; 会发生三次 */
  /* animation-delay: 3s; 这是一个延迟 */
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    /* 形成一种中间抖动的感觉 */
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
    /* 貌似是一样的 */
    transform: translate(none);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    /* 形成一种中间抖动的感觉 */
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
    /* 貌似是一样的 */
    /* transform: translate(none); */
  }
}

/* 给按钮一个从下向上浮动的效果 */
@keyframes moveInBottom {
  0% {
    opacity: 0;
    /* 先向下走 */
    transform: translateY(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* 按钮的原始状态 & 按钮按完之后的状态 */
.btn:link,
.btn:visited {
  display: inline-block;
  position: relative; /* 这里是为了按钮的遮盖层1-2 */
  padding: 1.5rem 4rem;
  text-transform: uppercase;
  text-decoration: none;
  border-radius: 10rem;
  transition: all 0.2s;
}
/* 悬浮状态 */
.btn:hover {
  /* hover向上走一点 */
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}
/* 按下去的时候 */
.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: #fff;
  color: #777;
}

/* 这里要做一个变大的小效果 需要用到伪元素 遮盖在前面 */
.btn::after {
  content: '';
  /* 设置块级 使得可以使用高度和宽度 */
  display: inline-block;
  /* 1-1 这个伪元素相当于就是btn的子元素了，所以这里的高度宽度相当于是btn */
  height: 100%;
  width: 100%;
  /* 1-2 但是走到这里还是不能覆盖 因为位置是不对的 所以需要重置位置 */
  position: absolute;
  top: 0;
  left: 0;
  /* 1-3 放在后面 */
  z-index: -1;
  border-radius: 100px;
  /* 这个transition过渡动画必须写在初始状态的时候才能似的all都生效 */
  transition: all 0.4s;
}

.btn--white::after {
  background-color: #fff;
}

.btn:hover::after {
  /* X轴放大1.4倍 Y轴放大1.6倍 */
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* 这个属性难记忆的 规定对象动画时间之外的状态*/
  /* 在动画被延迟，开始之前适用于0%的状态 也就是消失的状态*/
  animation-fill-mode: backwards;
}
